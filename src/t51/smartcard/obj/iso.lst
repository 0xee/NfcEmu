                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.3.0 #8604 (Sep  2 2013) (Linux)
                              4 ; This file was generated Thu May  8 18:45:16 2014
                              5 ;--------------------------------------------------------
                              6 	.module iso
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _memcpy
                             13 	.globl _ComputeCrc
                             14 	.globl _SendDebug
                             15 	.globl _PacketAvailable
                             16 	.globl _GetRxCount
                             17 	.globl _ResetRx
                             18 	.globl _GetTxBuf
                             19 	.globl _GetRx
                             20 	.globl _SendPacket
                             21 	.globl _TF2
                             22 	.globl _EXF2
                             23 	.globl _RCLK
                             24 	.globl _TCLK
                             25 	.globl _EXEN2
                             26 	.globl _TR2
                             27 	.globl _C_T2
                             28 	.globl _CP_RL2
                             29 	.globl _T2CON_7
                             30 	.globl _T2CON_6
                             31 	.globl _T2CON_5
                             32 	.globl _T2CON_4
                             33 	.globl _T2CON_3
                             34 	.globl _T2CON_2
                             35 	.globl _T2CON_1
                             36 	.globl _T2CON_0
                             37 	.globl _PT2
                             38 	.globl _ET2
                             39 	.globl _CY
                             40 	.globl _AC
                             41 	.globl _F0
                             42 	.globl _RS1
                             43 	.globl _RS0
                             44 	.globl _OV
                             45 	.globl _F1
                             46 	.globl _P
                             47 	.globl _PS
                             48 	.globl _PT1
                             49 	.globl _PX1
                             50 	.globl _PT0
                             51 	.globl _PX0
                             52 	.globl _RD
                             53 	.globl _WR
                             54 	.globl _T1
                             55 	.globl _T0
                             56 	.globl _INT1
                             57 	.globl _INT0
                             58 	.globl _TXD
                             59 	.globl _RXD
                             60 	.globl _P3_7
                             61 	.globl _P3_6
                             62 	.globl _P3_5
                             63 	.globl _P3_4
                             64 	.globl _P3_3
                             65 	.globl _P3_2
                             66 	.globl _P3_1
                             67 	.globl _P3_0
                             68 	.globl _EA
                             69 	.globl _ES
                             70 	.globl _ET1
                             71 	.globl _EX1
                             72 	.globl _ET0
                             73 	.globl _EX0
                             74 	.globl _P2_7
                             75 	.globl _P2_6
                             76 	.globl _P2_5
                             77 	.globl _P2_4
                             78 	.globl _P2_3
                             79 	.globl _P2_2
                             80 	.globl _P2_1
                             81 	.globl _P2_0
                             82 	.globl _SM0
                             83 	.globl _SM1
                             84 	.globl _SM2
                             85 	.globl _REN
                             86 	.globl _TB8
                             87 	.globl _RB8
                             88 	.globl _TI
                             89 	.globl _RI
                             90 	.globl _P1_7
                             91 	.globl _P1_6
                             92 	.globl _P1_5
                             93 	.globl _P1_4
                             94 	.globl _P1_3
                             95 	.globl _P1_2
                             96 	.globl _P1_1
                             97 	.globl _P1_0
                             98 	.globl _TF1
                             99 	.globl _TR1
                            100 	.globl _TF0
                            101 	.globl _TR0
                            102 	.globl _IE1
                            103 	.globl _IT1
                            104 	.globl _IE0
                            105 	.globl _IT0
                            106 	.globl _P0_7
                            107 	.globl _P0_6
                            108 	.globl _P0_5
                            109 	.globl _P0_4
                            110 	.globl _P0_3
                            111 	.globl _P0_2
                            112 	.globl _P0_1
                            113 	.globl _P0_0
                            114 	.globl _TH2
                            115 	.globl _TL2
                            116 	.globl _RCAP2H
                            117 	.globl _RCAP2L
                            118 	.globl _T2CON
                            119 	.globl _B
                            120 	.globl _ACC
                            121 	.globl _PSW
                            122 	.globl _IP
                            123 	.globl _P3
                            124 	.globl _IE
                            125 	.globl _P2
                            126 	.globl _SBUF
                            127 	.globl _SCON
                            128 	.globl _P1
                            129 	.globl _TH1
                            130 	.globl _TH0
                            131 	.globl _TL1
                            132 	.globl _TL0
                            133 	.globl _TMOD
                            134 	.globl _TCON
                            135 	.globl _PCON
                            136 	.globl _DPH
                            137 	.globl _DPL
                            138 	.globl _SP
                            139 	.globl _P0
                            140 	.globl _apduBuf
                            141 	.globl _piccRx
                            142 	.globl _hostRx
                            143 	.globl _IsoInit
                            144 	.globl _IsoProcessPcd
                            145 ;--------------------------------------------------------
                            146 ; special function registers
                            147 ;--------------------------------------------------------
                            148 	.area RSEG    (ABS,DATA)
   0000                     149 	.org 0x0000
                     0080   150 _P0	=	0x0080
                     0081   151 _SP	=	0x0081
                     0082   152 _DPL	=	0x0082
                     0083   153 _DPH	=	0x0083
                     0087   154 _PCON	=	0x0087
                     0088   155 _TCON	=	0x0088
                     0089   156 _TMOD	=	0x0089
                     008A   157 _TL0	=	0x008a
                     008B   158 _TL1	=	0x008b
                     008C   159 _TH0	=	0x008c
                     008D   160 _TH1	=	0x008d
                     0090   161 _P1	=	0x0090
                     0098   162 _SCON	=	0x0098
                     0099   163 _SBUF	=	0x0099
                     00A0   164 _P2	=	0x00a0
                     00A8   165 _IE	=	0x00a8
                     00B0   166 _P3	=	0x00b0
                     00B8   167 _IP	=	0x00b8
                     00D0   168 _PSW	=	0x00d0
                     00E0   169 _ACC	=	0x00e0
                     00F0   170 _B	=	0x00f0
                     00C8   171 _T2CON	=	0x00c8
                     00CA   172 _RCAP2L	=	0x00ca
                     00CB   173 _RCAP2H	=	0x00cb
                     00CC   174 _TL2	=	0x00cc
                     00CD   175 _TH2	=	0x00cd
                            176 ;--------------------------------------------------------
                            177 ; special function bits
                            178 ;--------------------------------------------------------
                            179 	.area RSEG    (ABS,DATA)
   0000                     180 	.org 0x0000
                     0080   181 _P0_0	=	0x0080
                     0081   182 _P0_1	=	0x0081
                     0082   183 _P0_2	=	0x0082
                     0083   184 _P0_3	=	0x0083
                     0084   185 _P0_4	=	0x0084
                     0085   186 _P0_5	=	0x0085
                     0086   187 _P0_6	=	0x0086
                     0087   188 _P0_7	=	0x0087
                     0088   189 _IT0	=	0x0088
                     0089   190 _IE0	=	0x0089
                     008A   191 _IT1	=	0x008a
                     008B   192 _IE1	=	0x008b
                     008C   193 _TR0	=	0x008c
                     008D   194 _TF0	=	0x008d
                     008E   195 _TR1	=	0x008e
                     008F   196 _TF1	=	0x008f
                     0090   197 _P1_0	=	0x0090
                     0091   198 _P1_1	=	0x0091
                     0092   199 _P1_2	=	0x0092
                     0093   200 _P1_3	=	0x0093
                     0094   201 _P1_4	=	0x0094
                     0095   202 _P1_5	=	0x0095
                     0096   203 _P1_6	=	0x0096
                     0097   204 _P1_7	=	0x0097
                     0098   205 _RI	=	0x0098
                     0099   206 _TI	=	0x0099
                     009A   207 _RB8	=	0x009a
                     009B   208 _TB8	=	0x009b
                     009C   209 _REN	=	0x009c
                     009D   210 _SM2	=	0x009d
                     009E   211 _SM1	=	0x009e
                     009F   212 _SM0	=	0x009f
                     00A0   213 _P2_0	=	0x00a0
                     00A1   214 _P2_1	=	0x00a1
                     00A2   215 _P2_2	=	0x00a2
                     00A3   216 _P2_3	=	0x00a3
                     00A4   217 _P2_4	=	0x00a4
                     00A5   218 _P2_5	=	0x00a5
                     00A6   219 _P2_6	=	0x00a6
                     00A7   220 _P2_7	=	0x00a7
                     00A8   221 _EX0	=	0x00a8
                     00A9   222 _ET0	=	0x00a9
                     00AA   223 _EX1	=	0x00aa
                     00AB   224 _ET1	=	0x00ab
                     00AC   225 _ES	=	0x00ac
                     00AF   226 _EA	=	0x00af
                     00B0   227 _P3_0	=	0x00b0
                     00B1   228 _P3_1	=	0x00b1
                     00B2   229 _P3_2	=	0x00b2
                     00B3   230 _P3_3	=	0x00b3
                     00B4   231 _P3_4	=	0x00b4
                     00B5   232 _P3_5	=	0x00b5
                     00B6   233 _P3_6	=	0x00b6
                     00B7   234 _P3_7	=	0x00b7
                     00B0   235 _RXD	=	0x00b0
                     00B1   236 _TXD	=	0x00b1
                     00B2   237 _INT0	=	0x00b2
                     00B3   238 _INT1	=	0x00b3
                     00B4   239 _T0	=	0x00b4
                     00B5   240 _T1	=	0x00b5
                     00B6   241 _WR	=	0x00b6
                     00B7   242 _RD	=	0x00b7
                     00B8   243 _PX0	=	0x00b8
                     00B9   244 _PT0	=	0x00b9
                     00BA   245 _PX1	=	0x00ba
                     00BB   246 _PT1	=	0x00bb
                     00BC   247 _PS	=	0x00bc
                     00D0   248 _P	=	0x00d0
                     00D1   249 _F1	=	0x00d1
                     00D2   250 _OV	=	0x00d2
                     00D3   251 _RS0	=	0x00d3
                     00D4   252 _RS1	=	0x00d4
                     00D5   253 _F0	=	0x00d5
                     00D6   254 _AC	=	0x00d6
                     00D7   255 _CY	=	0x00d7
                     00AD   256 _ET2	=	0x00ad
                     00BD   257 _PT2	=	0x00bd
                     00C8   258 _T2CON_0	=	0x00c8
                     00C9   259 _T2CON_1	=	0x00c9
                     00CA   260 _T2CON_2	=	0x00ca
                     00CB   261 _T2CON_3	=	0x00cb
                     00CC   262 _T2CON_4	=	0x00cc
                     00CD   263 _T2CON_5	=	0x00cd
                     00CE   264 _T2CON_6	=	0x00ce
                     00CF   265 _T2CON_7	=	0x00cf
                     00C8   266 _CP_RL2	=	0x00c8
                     00C9   267 _C_T2	=	0x00c9
                     00CA   268 _TR2	=	0x00ca
                     00CB   269 _EXEN2	=	0x00cb
                     00CC   270 _TCLK	=	0x00cc
                     00CD   271 _RCLK	=	0x00cd
                     00CE   272 _EXF2	=	0x00ce
                     00CF   273 _TF2	=	0x00cf
                            274 ;--------------------------------------------------------
                            275 ; overlayable register banks
                            276 ;--------------------------------------------------------
                            277 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     278 	.ds 8
                            279 ;--------------------------------------------------------
                            280 ; internal ram data
                            281 ;--------------------------------------------------------
                            282 	.area DSEG    (DATA)
   0000                     283 _fsd:
   0000                     284 	.ds 1
   0001                     285 _cid:
   0001                     286 	.ds 1
   0002                     287 _blockNumber:
   0002                     288 	.ds 1
   0003                     289 _lastTxLen:
   0003                     290 	.ds 1
   0004                     291 _iBlockReceived:
   0004                     292 	.ds 1
   0005                     293 _hostRx::
   0005                     294 	.ds 2
   0007                     295 _piccRx::
   0007                     296 	.ds 2
   0009                     297 _ProcessIBlock_apduOffset_1_54:
   0009                     298 	.ds 1
   000A                     299 _ProcessIBlock_sWtx_1_54:
   000A                     300 	.ds 5
   000F                     301 _ProcessIBlock_sloc0_1_0:
   000F                     302 	.ds 3
                            303 ;--------------------------------------------------------
                            304 ; overlayable items in internal ram 
                            305 ;--------------------------------------------------------
                            306 	.area	OSEG    (OVR,DATA)
                            307 ;--------------------------------------------------------
                            308 ; indirectly addressable internal ram data
                            309 ;--------------------------------------------------------
                            310 	.area ISEG    (DATA)
                            311 ;--------------------------------------------------------
                            312 ; absolute internal ram data
                            313 ;--------------------------------------------------------
                            314 	.area IABS    (ABS,DATA)
                            315 	.area IABS    (ABS,DATA)
                            316 ;--------------------------------------------------------
                            317 ; bit data
                            318 ;--------------------------------------------------------
                            319 	.area BSEG    (BIT)
                            320 ;--------------------------------------------------------
                            321 ; paged external ram data
                            322 ;--------------------------------------------------------
                            323 	.area PSEG    (PAG,XDATA)
                            324 ;--------------------------------------------------------
                            325 ; external ram data
                            326 ;--------------------------------------------------------
                            327 	.area XSEG    (XDATA)
   0000                     328 _apduBuf::
   0000                     329 	.ds 256
                            330 ;--------------------------------------------------------
                            331 ; absolute external ram data
                            332 ;--------------------------------------------------------
                            333 	.area XABS    (ABS,XDATA)
                            334 ;--------------------------------------------------------
                            335 ; external initialized ram data
                            336 ;--------------------------------------------------------
                            337 	.area XISEG   (XDATA)
                            338 	.area HOME    (CODE)
                            339 	.area GSINIT0 (CODE)
                            340 	.area GSINIT1 (CODE)
                            341 	.area GSINIT2 (CODE)
                            342 	.area GSINIT3 (CODE)
                            343 	.area GSINIT4 (CODE)
                            344 	.area GSINIT5 (CODE)
                            345 	.area GSINIT  (CODE)
                            346 	.area GSFINAL (CODE)
                            347 	.area CSEG    (CODE)
                            348 ;--------------------------------------------------------
                            349 ; global & static initialisations
                            350 ;--------------------------------------------------------
                            351 	.area HOME    (CODE)
                            352 	.area GSINIT  (CODE)
                            353 	.area GSFINAL (CODE)
                            354 	.area GSINIT  (CODE)
                            355 ;	iso.c:51: static uint8_t blockNumber = 1;
   0000 75*02 01      [24]  356 	mov	_blockNumber,#0x01
                            357 ;	iso.c:52: static uint8_t lastTxLen = 0;
   0003 75*03 00      [24]  358 	mov	_lastTxLen,#0x00
                            359 ;--------------------------------------------------------
                            360 ; Home
                            361 ;--------------------------------------------------------
                            362 	.area HOME    (CODE)
                            363 	.area HOME    (CODE)
                            364 ;--------------------------------------------------------
                            365 ; code
                            366 ;--------------------------------------------------------
                            367 	.area CSEG    (CODE)
                            368 ;------------------------------------------------------------
                            369 ;Allocation info for local variables in function 'ResetWtx'
                            370 ;------------------------------------------------------------
                            371 ;wtx                       Allocated to registers r5 r6 r7 
                            372 ;------------------------------------------------------------
                            373 ;	iso.c:70: static void ResetWtx(WtxContext * wtx) {
                            374 ;	-----------------------------------------
                            375 ;	 function ResetWtx
                            376 ;	-----------------------------------------
   0000                     377 _ResetWtx:
                     0007   378 	ar7 = 0x07
                     0006   379 	ar6 = 0x06
                     0005   380 	ar5 = 0x05
                     0004   381 	ar4 = 0x04
                     0003   382 	ar3 = 0x03
                     0002   383 	ar2 = 0x02
                     0001   384 	ar1 = 0x01
                     0000   385 	ar0 = 0x00
                            386 ;	iso.c:71: wtx->spinCount = SWTX_INTERVAL;
   0000 74 B0         [12]  387 	mov	a,#0xB0
   0002 12r00r00      [24]  388 	lcall	__gptrput
   0005 A3            [24]  389 	inc	dptr
   0006 74 04         [12]  390 	mov	a,#0x04
   0008 12r00r00      [24]  391 	lcall	__gptrput
   000B A3            [24]  392 	inc	dptr
   000C E4            [12]  393 	clr	a
   000D 12r00r00      [24]  394 	lcall	__gptrput
   0010 A3            [24]  395 	inc	dptr
   0011 E4            [12]  396 	clr	a
   0012 02r00r00      [24]  397 	ljmp	__gptrput
                            398 ;------------------------------------------------------------
                            399 ;Allocation info for local variables in function 'SendSwtx'
                            400 ;------------------------------------------------------------
                            401 ;	iso.c:74: static void SendSwtx(void) {
                            402 ;	-----------------------------------------
                            403 ;	 function SendSwtx
                            404 ;	-----------------------------------------
   0015                     405 _SendSwtx:
                            406 ;	iso.c:75: TX_BUF[0] = WTX_REQUEST;
   0015 12r00r00      [24]  407 	lcall	_GetTxBuf
   0018 74 F2         [12]  408 	mov	a,#0xF2
   001A F0            [24]  409 	movx	@dptr,a
                            410 ;	iso.c:76: TX_BUF[1] = 10;
   001B 12r00r00      [24]  411 	lcall	_GetTxBuf
   001E E5 82         [12]  412 	mov	a,dpl
   0020 85 83 F0      [24]  413 	mov	b,dph
   0023 24 01         [12]  414 	add	a,#0x01
   0025 F5 82         [12]  415 	mov	dpl,a
   0027 E4            [12]  416 	clr	a
   0028 35 F0         [12]  417 	addc	a,b
   002A F5 83         [12]  418 	mov	dph,a
   002C 74 0A         [12]  419 	mov	a,#0x0A
   002E F0            [24]  420 	movx	@dptr,a
                            421 ;	iso.c:77: ComputeCrc(TX_BUF, 2);
   002F 12r00r00      [24]  422 	lcall	_GetTxBuf
   0032 AE 82         [24]  423 	mov	r6,dpl
   0034 AF 83         [24]  424 	mov	r7,dph
   0036 7D 00         [12]  425 	mov	r5,#0x00
   0038 75*00 02      [24]  426 	mov	_ComputeCrc_PARM_2,#0x02
   003B 75*01 00      [24]  427 	mov	(_ComputeCrc_PARM_2 + 1),#0x00
   003E 8E 82         [24]  428 	mov	dpl,r6
   0040 8F 83         [24]  429 	mov	dph,r7
   0042 8D F0         [24]  430 	mov	b,r5
   0044 12r00r00      [24]  431 	lcall	_ComputeCrc
                            432 ;	iso.c:78: SendPacket(PICC, 0, TX_BUF, 4);
   0047 12r00r00      [24]  433 	lcall	_GetTxBuf
   004A 85 82*00      [24]  434 	mov	_SendPacket_PARM_3,dpl
   004D 85 83*01      [24]  435 	mov	(_SendPacket_PARM_3 + 1),dph
   0050 75*00 00      [24]  436 	mov	_SendPacket_PARM_2,#0x00
   0053 75*00 04      [24]  437 	mov	_SendPacket_PARM_4,#0x04
   0056 75*01 00      [24]  438 	mov	(_SendPacket_PARM_4 + 1),#0x00
   0059 75 82 01      [24]  439 	mov	dpl,#0x01
   005C 02r00r00      [24]  440 	ljmp	_SendPacket
                            441 ;------------------------------------------------------------
                            442 ;Allocation info for local variables in function 'HandleWtx'
                            443 ;------------------------------------------------------------
                            444 ;wtx                       Allocated to registers r5 r6 r7 
                            445 ;------------------------------------------------------------
                            446 ;	iso.c:82: static int8_t HandleWtx(WtxContext * wtx) {
                            447 ;	-----------------------------------------
                            448 ;	 function HandleWtx
                            449 ;	-----------------------------------------
   005F                     450 _HandleWtx:
                            451 ;	iso.c:84: if(wtx->spinCount == 0 && !wtx->missingAcks) {
   005F AD 82         [24]  452 	mov	r5,dpl
   0061 AE 83         [24]  453 	mov	r6,dph
   0063 AF F0         [24]  454 	mov	r7,b
   0065 12r00r00      [24]  455 	lcall	__gptrget
   0068 F9            [12]  456 	mov	r1,a
   0069 A3            [24]  457 	inc	dptr
   006A 12r00r00      [24]  458 	lcall	__gptrget
   006D FA            [12]  459 	mov	r2,a
   006E A3            [24]  460 	inc	dptr
   006F 12r00r00      [24]  461 	lcall	__gptrget
   0072 FB            [12]  462 	mov	r3,a
   0073 A3            [24]  463 	inc	dptr
   0074 12r00r00      [24]  464 	lcall	__gptrget
   0077 FC            [12]  465 	mov	r4,a
   0078 E9            [12]  466 	mov	a,r1
   0079 4A            [12]  467 	orl	a,r2
   007A 4B            [12]  468 	orl	a,r3
   007B 4C            [12]  469 	orl	a,r4
   007C 70 5F         [24]  470 	jnz	00102$
   007E 74 04         [12]  471 	mov	a,#0x04
   0080 2D            [12]  472 	add	a,r5
   0081 FA            [12]  473 	mov	r2,a
   0082 E4            [12]  474 	clr	a
   0083 3E            [12]  475 	addc	a,r6
   0084 FB            [12]  476 	mov	r3,a
   0085 8F 04         [24]  477 	mov	ar4,r7
   0087 8A 82         [24]  478 	mov	dpl,r2
   0089 8B 83         [24]  479 	mov	dph,r3
   008B 8C F0         [24]  480 	mov	b,r4
   008D 12r00r00      [24]  481 	lcall	__gptrget
   0090 70 4B         [24]  482 	jnz	00102$
                            483 ;	iso.c:85: SendSwtx();
   0092 C0 07         [24]  484 	push	ar7
   0094 C0 06         [24]  485 	push	ar6
   0096 C0 05         [24]  486 	push	ar5
   0098 C0 04         [24]  487 	push	ar4
   009A C0 03         [24]  488 	push	ar3
   009C C0 02         [24]  489 	push	ar2
   009E 12r00r15      [24]  490 	lcall	_SendSwtx
   00A1 D0 02         [24]  491 	pop	ar2
   00A3 D0 03         [24]  492 	pop	ar3
   00A5 D0 04         [24]  493 	pop	ar4
   00A7 D0 05         [24]  494 	pop	ar5
   00A9 D0 06         [24]  495 	pop	ar6
   00AB D0 07         [24]  496 	pop	ar7
                            497 ;	iso.c:86: ++(wtx->missingAcks);
   00AD 8A 82         [24]  498 	mov	dpl,r2
   00AF 8B 83         [24]  499 	mov	dph,r3
   00B1 8C F0         [24]  500 	mov	b,r4
   00B3 12r00r00      [24]  501 	lcall	__gptrget
   00B6 F9            [12]  502 	mov	r1,a
   00B7 09            [12]  503 	inc	r1
   00B8 8A 82         [24]  504 	mov	dpl,r2
   00BA 8B 83         [24]  505 	mov	dph,r3
   00BC 8C F0         [24]  506 	mov	b,r4
   00BE E9            [12]  507 	mov	a,r1
   00BF 12r00r00      [24]  508 	lcall	__gptrput
                            509 ;	iso.c:87: wtx->spinCount = SWTX_INTERVAL;
   00C2 8D 82         [24]  510 	mov	dpl,r5
   00C4 8E 83         [24]  511 	mov	dph,r6
   00C6 8F F0         [24]  512 	mov	b,r7
   00C8 74 B0         [12]  513 	mov	a,#0xB0
   00CA 12r00r00      [24]  514 	lcall	__gptrput
   00CD A3            [24]  515 	inc	dptr
   00CE 74 04         [12]  516 	mov	a,#0x04
   00D0 12r00r00      [24]  517 	lcall	__gptrput
   00D3 A3            [24]  518 	inc	dptr
   00D4 E4            [12]  519 	clr	a
   00D5 12r00r00      [24]  520 	lcall	__gptrput
   00D8 A3            [24]  521 	inc	dptr
   00D9 E4            [12]  522 	clr	a
   00DA 12r00r00      [24]  523 	lcall	__gptrput
   00DD                     524 00102$:
                            525 ;	iso.c:89: --(wtx->spinCount);
   00DD 8D 82         [24]  526 	mov	dpl,r5
   00DF 8E 83         [24]  527 	mov	dph,r6
   00E1 8F F0         [24]  528 	mov	b,r7
   00E3 12r00r00      [24]  529 	lcall	__gptrget
   00E6 F9            [12]  530 	mov	r1,a
   00E7 A3            [24]  531 	inc	dptr
   00E8 12r00r00      [24]  532 	lcall	__gptrget
   00EB FA            [12]  533 	mov	r2,a
   00EC A3            [24]  534 	inc	dptr
   00ED 12r00r00      [24]  535 	lcall	__gptrget
   00F0 FB            [12]  536 	mov	r3,a
   00F1 A3            [24]  537 	inc	dptr
   00F2 12r00r00      [24]  538 	lcall	__gptrget
   00F5 FC            [12]  539 	mov	r4,a
   00F6 19            [12]  540 	dec	r1
   00F7 B9 FF 09      [24]  541 	cjne	r1,#0xFF,00124$
   00FA 1A            [12]  542 	dec	r2
   00FB BA FF 05      [24]  543 	cjne	r2,#0xFF,00124$
   00FE 1B            [12]  544 	dec	r3
   00FF BB FF 01      [24]  545 	cjne	r3,#0xFF,00124$
   0102 1C            [12]  546 	dec	r4
   0103                     547 00124$:
   0103 8D 82         [24]  548 	mov	dpl,r5
   0105 8E 83         [24]  549 	mov	dph,r6
   0107 8F F0         [24]  550 	mov	b,r7
   0109 E9            [12]  551 	mov	a,r1
   010A 12r00r00      [24]  552 	lcall	__gptrput
   010D A3            [24]  553 	inc	dptr
   010E EA            [12]  554 	mov	a,r2
   010F 12r00r00      [24]  555 	lcall	__gptrput
   0112 A3            [24]  556 	inc	dptr
   0113 EB            [12]  557 	mov	a,r3
   0114 12r00r00      [24]  558 	lcall	__gptrput
   0117 A3            [24]  559 	inc	dptr
   0118 EC            [12]  560 	mov	a,r4
   0119 12r00r00      [24]  561 	lcall	__gptrput
                            562 ;	iso.c:91: if(PacketAvailable(PICC)) {
   011C 75 82 01      [24]  563 	mov	dpl,#0x01
   011F C0 07         [24]  564 	push	ar7
   0121 C0 06         [24]  565 	push	ar6
   0123 C0 05         [24]  566 	push	ar5
   0125 12r00r00      [24]  567 	lcall	_PacketAvailable
   0128 E5 82         [12]  568 	mov	a,dpl
   012A D0 05         [24]  569 	pop	ar5
   012C D0 06         [24]  570 	pop	ar6
   012E D0 07         [24]  571 	pop	ar7
   0130 60 47         [24]  572 	jz	00107$
                            573 ;	iso.c:92: if(piccRx[0] != WTX_RESPONSE) {
   0132 85*07 82      [24]  574 	mov	dpl,_piccRx
   0135 85*08 83      [24]  575 	mov	dph,(_piccRx + 1)
   0138 E0            [24]  576 	movx	a,@dptr
   0139 FC            [12]  577 	mov	r4,a
   013A BC F2 02      [24]  578 	cjne	r4,#0xF2,00126$
   013D 80 04         [24]  579 	sjmp	00105$
   013F                     580 00126$:
                            581 ;	iso.c:93: return -1;
   013F 75 82 FF      [24]  582 	mov	dpl,#0xFF
   0142 22            [24]  583 	ret
   0143                     584 00105$:
                            585 ;	iso.c:95: --(wtx->missingAcks);
   0143 74 04         [12]  586 	mov	a,#0x04
   0145 2D            [12]  587 	add	a,r5
   0146 FA            [12]  588 	mov	r2,a
   0147 E4            [12]  589 	clr	a
   0148 3E            [12]  590 	addc	a,r6
   0149 FB            [12]  591 	mov	r3,a
   014A 8F 04         [24]  592 	mov	ar4,r7
   014C 8A 82         [24]  593 	mov	dpl,r2
   014E 8B 83         [24]  594 	mov	dph,r3
   0150 8C F0         [24]  595 	mov	b,r4
   0152 12r00r00      [24]  596 	lcall	__gptrget
   0155 F9            [12]  597 	mov	r1,a
   0156 19            [12]  598 	dec	r1
   0157 8A 82         [24]  599 	mov	dpl,r2
   0159 8B 83         [24]  600 	mov	dph,r3
   015B 8C F0         [24]  601 	mov	b,r4
   015D E9            [12]  602 	mov	a,r1
   015E 12r00r00      [24]  603 	lcall	__gptrput
                            604 ;	iso.c:96: SendDebug(D_WTX_ACK);
   0161 75 82 0F      [24]  605 	mov	dpl,#0x0F
   0164 C0 07         [24]  606 	push	ar7
   0166 C0 06         [24]  607 	push	ar6
   0168 C0 05         [24]  608 	push	ar5
   016A 12r00r00      [24]  609 	lcall	_SendDebug
                            610 ;	iso.c:98: ResetRx(PICC);
   016D 75 82 01      [24]  611 	mov	dpl,#0x01
   0170 12r00r00      [24]  612 	lcall	_ResetRx
   0173 D0 05         [24]  613 	pop	ar5
   0175 D0 06         [24]  614 	pop	ar6
   0177 D0 07         [24]  615 	pop	ar7
   0179                     616 00107$:
                            617 ;	iso.c:100: return wtx->missingAcks;
   0179 74 04         [12]  618 	mov	a,#0x04
   017B 2D            [12]  619 	add	a,r5
   017C FD            [12]  620 	mov	r5,a
   017D E4            [12]  621 	clr	a
   017E 3E            [12]  622 	addc	a,r6
   017F FE            [12]  623 	mov	r6,a
   0180 8D 82         [24]  624 	mov	dpl,r5
   0182 8E 83         [24]  625 	mov	dph,r6
   0184 8F F0         [24]  626 	mov	b,r7
   0186 12r00r00      [24]  627 	lcall	__gptrget
   0189 F5 82         [12]  628 	mov	dpl,a
   018B 22            [24]  629 	ret
                            630 ;------------------------------------------------------------
                            631 ;Allocation info for local variables in function 'IsoInit'
                            632 ;------------------------------------------------------------
                            633 ;	iso.c:106: void IsoInit() {
                            634 ;	-----------------------------------------
                            635 ;	 function IsoInit
                            636 ;	-----------------------------------------
   018C                     637 _IsoInit:
                            638 ;	iso.c:107: piccRx = GetRx(PICC);
   018C 75 82 01      [24]  639 	mov	dpl,#0x01
   018F 12r00r00      [24]  640 	lcall	_GetRx
   0192 85 82*07      [24]  641 	mov	_piccRx,dpl
   0195 85 83*08      [24]  642 	mov	(_piccRx + 1),dph
                            643 ;	iso.c:108: hostRx = GetRx(HOST);
   0198 75 82 00      [24]  644 	mov	dpl,#0x00
   019B 12r00r00      [24]  645 	lcall	_GetRx
   019E 85 82*05      [24]  646 	mov	_hostRx,dpl
   01A1 85 83*06      [24]  647 	mov	(_hostRx + 1),dph
                            648 ;	iso.c:109: iBlockReceived = 0;
   01A4 75*04 00      [24]  649 	mov	_iBlockReceived,#0x00
   01A7 22            [24]  650 	ret
                            651 ;------------------------------------------------------------
                            652 ;Allocation info for local variables in function 'IsoProcessPcd'
                            653 ;------------------------------------------------------------
                            654 ;rxLen                     Allocated to registers 
                            655 ;------------------------------------------------------------
                            656 ;	iso.c:112: void IsoProcessPcd(void) {
                            657 ;	-----------------------------------------
                            658 ;	 function IsoProcessPcd
                            659 ;	-----------------------------------------
   01A8                     660 _IsoProcessPcd:
                            661 ;	iso.c:113: uint8_t rxLen = GetRxCount(PICC);
   01A8 75 82 01      [24]  662 	mov	dpl,#0x01
   01AB 12r00r00      [24]  663 	lcall	_GetRxCount
                            664 ;	iso.c:117: switch(piccRx[0] & BLOCK_MASK) {
   01AE 85*07 82      [24]  665 	mov	dpl,_piccRx
   01B1 85*08 83      [24]  666 	mov	dph,(_piccRx + 1)
   01B4 E0            [24]  667 	movx	a,@dptr
   01B5 FF            [12]  668 	mov	r7,a
   01B6 53 07 E0      [24]  669 	anl	ar7,#0xE0
   01B9 BF 00 02      [24]  670 	cjne	r7,#0x00,00122$
   01BC 80 0A         [24]  671 	sjmp	00101$
   01BE                     672 00122$:
   01BE BF A0 02      [24]  673 	cjne	r7,#0xA0,00123$
   01C1 80 08         [24]  674 	sjmp	00102$
   01C3                     675 00123$:
                            676 ;	iso.c:118: case I_BLOCK:
   01C3 BF C0 0B      [24]  677 	cjne	r7,#0xC0,00104$
   01C6 80 06         [24]  678 	sjmp	00103$
   01C8                     679 00101$:
                            680 ;	iso.c:119: ProcessIBlock();
                            681 ;	iso.c:120: break;
                            682 ;	iso.c:122: case R_BLOCK:
   01C8 02r03r05      [24]  683 	ljmp	_ProcessIBlock
   01CB                     684 00102$:
                            685 ;	iso.c:123: ProcessRBlock();
                            686 ;	iso.c:124: break;
                            687 ;	iso.c:126: case S_BLOCK:
   01CB 02r06r1E      [24]  688 	ljmp	_ProcessRBlock
   01CE                     689 00103$:
                            690 ;	iso.c:127: ProcessSBlock();
                            691 ;	iso.c:128: break;
                            692 ;	iso.c:130: default:
   01CE 02r06r87      [24]  693 	ljmp	_ProcessSBlock
   01D1                     694 00104$:
                            695 ;	iso.c:131: switch(piccRx[0]) {
   01D1 85*07 82      [24]  696 	mov	dpl,_piccRx
   01D4 85*08 83      [24]  697 	mov	dph,(_piccRx + 1)
   01D7 E0            [24]  698 	movx	a,@dptr
   01D8 FF            [12]  699 	mov	r7,a
   01D9 BF E0 2D      [24]  700 	cjne	r7,#0xE0,00106$
                            701 ;	iso.c:133: blockNumber = 1;
   01DC 75*02 01      [24]  702 	mov	_blockNumber,#0x01
                            703 ;	iso.c:134: fsd = DECODE_FSDI(piccRx[1] >> 4);
   01DF 85*07 82      [24]  704 	mov	dpl,_piccRx
   01E2 85*08 83      [24]  705 	mov	dph,(_piccRx + 1)
   01E5 A3            [24]  706 	inc	dptr
   01E6 E0            [24]  707 	movx	a,@dptr
   01E7 FF            [12]  708 	mov	r7,a
   01E8 C4            [12]  709 	swap	a
   01E9 54 0F         [12]  710 	anl	a,#0x0F
   01EB 75 F0 02      [24]  711 	mov	b,#0x02
   01EE A4            [48]  712 	mul	ab
   01EF 24r00         [12]  713 	add	a,#_fsdTable
   01F1 F5 82         [12]  714 	mov	dpl,a
   01F3 74s00         [12]  715 	mov	a,#(_fsdTable >> 8)
   01F5 35 F0         [12]  716 	addc	a,b
   01F7 F5 83         [12]  717 	mov	dph,a
   01F9 E4            [12]  718 	clr	a
   01FA 93            [24]  719 	movc	a,@a+dptr
   01FB FD            [12]  720 	mov	r5,a
   01FC A3            [24]  721 	inc	dptr
   01FD E4            [12]  722 	clr	a
   01FE 93            [24]  723 	movc	a,@a+dptr
   01FF 8D*00         [24]  724 	mov	_fsd,r5
                            725 ;	iso.c:135: cid = piccRx[1] & 0x0F;
   0201 74 0F         [12]  726 	mov	a,#0x0F
   0203 5F            [12]  727 	anl	a,r7
   0204 F5*01         [12]  728 	mov	_cid,a
                            729 ;	iso.c:136: SendAts();
   0206 12r02r0F      [24]  730 	lcall	_SendAts
                            731 ;	iso.c:138: }
   0209                     732 00106$:
                            733 ;	iso.c:139: ResetRx(PICC);
   0209 75 82 01      [24]  734 	mov	dpl,#0x01
                            735 ;	iso.c:141: }
   020C 02r00r00      [24]  736 	ljmp	_ResetRx
                            737 ;------------------------------------------------------------
                            738 ;Allocation info for local variables in function 'SendAts'
                            739 ;------------------------------------------------------------
                            740 ;__00010001                Allocated to registers r6 r7 
                            741 ;__00010002                Allocated to registers r6 r7 
                            742 ;------------------------------------------------------------
                            743 ;	iso.c:149: static void SendAts(void) {
                            744 ;	-----------------------------------------
                            745 ;	 function SendAts
                            746 ;	-----------------------------------------
   020F                     747 _SendAts:
                            748 ;	iso.c:150: TX_BUF[0] = 1;
   020F 12r00r00      [24]  749 	lcall	_GetTxBuf
   0212 74 01         [12]  750 	mov	a,#0x01
   0214 F0            [24]  751 	movx	@dptr,a
                            752 ;	iso.c:151: memcpy(TX_BUF+TX_BUF[0], ats, sizeof(ats));
   0215 12r00r00      [24]  753 	lcall	_GetTxBuf
   0218 AE 82         [24]  754 	mov	r6,dpl
   021A AF 83         [24]  755 	mov	r7,dph
   021C C0 07         [24]  756 	push	ar7
   021E C0 06         [24]  757 	push	ar6
   0220 12r00r00      [24]  758 	lcall	_GetTxBuf
   0223 D0 06         [24]  759 	pop	ar6
   0225 D0 07         [24]  760 	pop	ar7
   0227 E0            [24]  761 	movx	a,@dptr
   0228 2E            [12]  762 	add	a,r6
   0229 FE            [12]  763 	mov	r6,a
   022A E4            [12]  764 	clr	a
   022B 3F            [12]  765 	addc	a,r7
   022C FF            [12]  766 	mov	r7,a
   022D 7D 00         [12]  767 	mov	r5,#0x00
   022F 75*00r12      [24]  768 	mov	_memcpy_PARM_2,#_ats
   0232 75*01s00      [24]  769 	mov	(_memcpy_PARM_2 + 1),#(_ats >> 8)
   0235 75*02 80      [24]  770 	mov	(_memcpy_PARM_2 + 2),#0x80
   0238 75*00 04      [24]  771 	mov	_memcpy_PARM_3,#0x04
   023B 75*01 00      [24]  772 	mov	(_memcpy_PARM_3 + 1),#0x00
   023E 8E 82         [24]  773 	mov	dpl,r6
   0240 8F 83         [24]  774 	mov	dph,r7
   0242 8D F0         [24]  775 	mov	b,r5
   0244 12r00r00      [24]  776 	lcall	_memcpy
                            777 ;	iso.c:152: TX_BUF[3] = 0xa0; // override default fwi
   0247 12r00r00      [24]  778 	lcall	_GetTxBuf
   024A E5 82         [12]  779 	mov	a,dpl
   024C 85 83 F0      [24]  780 	mov	b,dph
   024F 24 03         [12]  781 	add	a,#0x03
   0251 F5 82         [12]  782 	mov	dpl,a
   0253 E4            [12]  783 	clr	a
   0254 35 F0         [12]  784 	addc	a,b
   0256 F5 83         [12]  785 	mov	dph,a
   0258 74 A0         [12]  786 	mov	a,#0xA0
   025A F0            [24]  787 	movx	@dptr,a
                            788 ;	iso.c:153: TX_BUF[0] += sizeof(ats);
   025B 12r00r00      [24]  789 	lcall	_GetTxBuf
   025E AE 82         [24]  790 	mov	r6,dpl
   0260 AF 83         [24]  791 	mov  r7,dph
   0262 E0            [24]  792 	movx	a,@dptr
   0263 24 04         [12]  793 	add	a,#0x04
   0265 8E 82         [24]  794 	mov	dpl,r6
   0267 8F 83         [24]  795 	mov	dph,r7
   0269 F0            [24]  796 	movx	@dptr,a
                            797 ;	iso.c:154: memcpy(TX_BUF+TX_BUF[0], historical, sizeof(historical));
   026A 12r00r00      [24]  798 	lcall	_GetTxBuf
   026D AE 82         [24]  799 	mov	r6,dpl
   026F AF 83         [24]  800 	mov	r7,dph
   0271 C0 07         [24]  801 	push	ar7
   0273 C0 06         [24]  802 	push	ar6
   0275 12r00r00      [24]  803 	lcall	_GetTxBuf
   0278 D0 06         [24]  804 	pop	ar6
   027A D0 07         [24]  805 	pop	ar7
   027C E0            [24]  806 	movx	a,@dptr
   027D 2E            [12]  807 	add	a,r6
   027E FE            [12]  808 	mov	r6,a
   027F E4            [12]  809 	clr	a
   0280 3F            [12]  810 	addc	a,r7
   0281 FF            [12]  811 	mov	r7,a
   0282 7D 00         [12]  812 	mov	r5,#0x00
   0284 75*00r16      [24]  813 	mov	_memcpy_PARM_2,#_historical
   0287 75*01s00      [24]  814 	mov	(_memcpy_PARM_2 + 1),#(_historical >> 8)
   028A 75*02 80      [24]  815 	mov	(_memcpy_PARM_2 + 2),#0x80
   028D 75*00 0F      [24]  816 	mov	_memcpy_PARM_3,#0x0F
   0290 75*01 00      [24]  817 	mov	(_memcpy_PARM_3 + 1),#0x00
   0293 8E 82         [24]  818 	mov	dpl,r6
   0295 8F 83         [24]  819 	mov	dph,r7
   0297 8D F0         [24]  820 	mov	b,r5
   0299 12r00r00      [24]  821 	lcall	_memcpy
                            822 ;	iso.c:155: TX_BUF[0] += sizeof(historical);
   029C 12r00r00      [24]  823 	lcall	_GetTxBuf
   029F AE 82         [24]  824 	mov	r6,dpl
   02A1 AF 83         [24]  825 	mov  r7,dph
   02A3 E0            [24]  826 	movx	a,@dptr
   02A4 24 0F         [12]  827 	add	a,#0x0F
   02A6 8E 82         [24]  828 	mov	dpl,r6
   02A8 8F 83         [24]  829 	mov	dph,r7
   02AA F0            [24]  830 	movx	@dptr,a
                            831 ;	iso.c:156: ComputeCrc(TX_BUF, TX_BUF[0]);
   02AB 12r00r00      [24]  832 	lcall	_GetTxBuf
   02AE AE 82         [24]  833 	mov	r6,dpl
   02B0 AF 83         [24]  834 	mov	r7,dph
   02B2 7D 00         [12]  835 	mov	r5,#0x00
   02B4 C0 07         [24]  836 	push	ar7
   02B6 C0 06         [24]  837 	push	ar6
   02B8 C0 05         [24]  838 	push	ar5
   02BA 12r00r00      [24]  839 	lcall	_GetTxBuf
   02BD D0 05         [24]  840 	pop	ar5
   02BF D0 06         [24]  841 	pop	ar6
   02C1 D0 07         [24]  842 	pop	ar7
   02C3 E0            [24]  843 	movx	a,@dptr
   02C4 FC            [12]  844 	mov	r4,a
   02C5 8C*00         [24]  845 	mov	_ComputeCrc_PARM_2,r4
   02C7 75*01 00      [24]  846 	mov	(_ComputeCrc_PARM_2 + 1),#0x00
   02CA 8E 82         [24]  847 	mov	dpl,r6
   02CC 8F 83         [24]  848 	mov	dph,r7
   02CE 8D F0         [24]  849 	mov	b,r5
   02D0 12r00r00      [24]  850 	lcall	_ComputeCrc
                            851 ;	iso.c:157: SendPacket(PICC, 0, TX_BUF, TX_BUF[0]+2);
   02D3 12r00r00      [24]  852 	lcall	_GetTxBuf
   02D6 AE 82         [24]  853 	mov	r6,dpl
   02D8 AF 83         [24]  854 	mov	r7,dph
   02DA C0 07         [24]  855 	push	ar7
   02DC C0 06         [24]  856 	push	ar6
   02DE 12r00r00      [24]  857 	lcall	_GetTxBuf
   02E1 D0 06         [24]  858 	pop	ar6
   02E3 D0 07         [24]  859 	pop	ar7
   02E5 E0            [24]  860 	movx	a,@dptr
   02E6 FD            [12]  861 	mov	r5,a
   02E7 7C 00         [12]  862 	mov	r4,#0x00
   02E9 74 02         [12]  863 	mov	a,#0x02
   02EB 2D            [12]  864 	add	a,r5
   02EC F5*00         [12]  865 	mov	_SendPacket_PARM_4,a
   02EE E4            [12]  866 	clr	a
   02EF 3C            [12]  867 	addc	a,r4
   02F0 F5*01         [12]  868 	mov	(_SendPacket_PARM_4 + 1),a
   02F2 75*00 00      [24]  869 	mov	_SendPacket_PARM_2,#0x00
   02F5 8E*00         [24]  870 	mov	_SendPacket_PARM_3,r6
   02F7 8F*01         [24]  871 	mov	(_SendPacket_PARM_3 + 1),r7
   02F9 75 82 01      [24]  872 	mov	dpl,#0x01
   02FC 12r00r00      [24]  873 	lcall	_SendPacket
                            874 ;	iso.c:159: SendDebug(D_ISO_L4_ACTIVATED); 
   02FF 75 82 09      [24]  875 	mov	dpl,#0x09
   0302 02r00r00      [24]  876 	ljmp	_SendDebug
                            877 ;------------------------------------------------------------
                            878 ;Allocation info for local variables in function 'ProcessIBlock'
                            879 ;------------------------------------------------------------
                            880 ;apduOffset                Allocated with name '_ProcessIBlock_apduOffset_1_54'
                            881 ;needSwtxAck               Allocated to registers 
                            882 ;responseComplete          Allocated to registers 
                            883 ;pcb                       Allocated to registers r6 
                            884 ;cid                       Allocated to registers 
                            885 ;sWtx                      Allocated with name '_ProcessIBlock_sWtx_1_54'
                            886 ;sloc0                     Allocated with name '_ProcessIBlock_sloc0_1_0'
                            887 ;------------------------------------------------------------
                            888 ;	iso.c:162: static void ProcessIBlock() {    
                            889 ;	-----------------------------------------
                            890 ;	 function ProcessIBlock
                            891 ;	-----------------------------------------
   0305                     892 _ProcessIBlock:
                            893 ;	iso.c:163: uint8_t apduOffset = 1;
   0305 75*09 01      [24]  894 	mov	_ProcessIBlock_apduOffset_1_54,#0x01
                            895 ;	iso.c:166: uint8_t pcb = piccRx[0];
   0308 85*07 82      [24]  896 	mov	dpl,_piccRx
   030B 85*08 83      [24]  897 	mov	dph,(_piccRx + 1)
   030E E0            [24]  898 	movx	a,@dptr
   030F FE            [12]  899 	mov	r6,a
                            900 ;	iso.c:169: iBlockReceived = 1;
   0310 75*04 01      [24]  901 	mov	_iBlockReceived,#0x01
                            902 ;	iso.c:170: blockNumber ^= 1;
   0313 63*02 01      [24]  903 	xrl	_blockNumber,#0x01
                            904 ;	iso.c:175: if(pcb & NAD_FOLLOWING) ++apduOffset;
   0316 EE            [12]  905 	mov	a,r6
   0317 30 E2 03      [24]  906 	jnb	acc.2,00102$
   031A 75*09 02      [24]  907 	mov	_ProcessIBlock_apduOffset_1_54,#0x02
   031D                     908 00102$:
                            909 ;	iso.c:176: ResetRx(HOST);
   031D 75 82 00      [24]  910 	mov	dpl,#0x00
   0320 12r00r00      [24]  911 	lcall	_ResetRx
                            912 ;	iso.c:179: SendPacket(HOST, ID_APDU_DOWN, piccRx+apduOffset, GetRxCount(PICC)-apduOffset-2);
   0323 E5*09         [12]  913 	mov	a,_ProcessIBlock_apduOffset_1_54
   0325 25*07         [12]  914 	add	a,_piccRx
   0327 FD            [12]  915 	mov	r5,a
   0328 E4            [12]  916 	clr	a
   0329 35*08         [12]  917 	addc	a,(_piccRx + 1)
   032B FE            [12]  918 	mov	r6,a
   032C 75 82 01      [24]  919 	mov	dpl,#0x01
   032F C0 06         [24]  920 	push	ar6
   0331 C0 05         [24]  921 	push	ar5
   0333 12r00r00      [24]  922 	lcall	_GetRxCount
   0336 AB 82         [24]  923 	mov	r3,dpl
   0338 AC 83         [24]  924 	mov	r4,dph
   033A D0 05         [24]  925 	pop	ar5
   033C D0 06         [24]  926 	pop	ar6
   033E A9*09         [24]  927 	mov	r1,_ProcessIBlock_apduOffset_1_54
   0340 7A 00         [12]  928 	mov	r2,#0x00
   0342 EB            [12]  929 	mov	a,r3
   0343 C3            [12]  930 	clr	c
   0344 99            [12]  931 	subb	a,r1
   0345 FB            [12]  932 	mov	r3,a
   0346 EC            [12]  933 	mov	a,r4
   0347 9A            [12]  934 	subb	a,r2
   0348 FC            [12]  935 	mov	r4,a
   0349 EB            [12]  936 	mov	a,r3
   034A 24 FE         [12]  937 	add	a,#0xFE
   034C F5*00         [12]  938 	mov	_SendPacket_PARM_4,a
   034E EC            [12]  939 	mov	a,r4
   034F 34 FF         [12]  940 	addc	a,#0xFF
   0351 F5*01         [12]  941 	mov	(_SendPacket_PARM_4 + 1),a
   0353 75*00 21      [24]  942 	mov	_SendPacket_PARM_2,#0x21
   0356 8D*00         [24]  943 	mov	_SendPacket_PARM_3,r5
   0358 8E*01         [24]  944 	mov	(_SendPacket_PARM_3 + 1),r6
   035A 75 82 00      [24]  945 	mov	dpl,#0x00
   035D C0 02         [24]  946 	push	ar2
   035F C0 01         [24]  947 	push	ar1
   0361 12r00r00      [24]  948 	lcall	_SendPacket
                            949 ;	iso.c:181: ResetRx(PICC);
   0364 75 82 01      [24]  950 	mov	dpl,#0x01
   0367 12r00r00      [24]  951 	lcall	_ResetRx
                            952 ;	iso.c:182: ResetWtx(&sWtx);
   036A 90r00r0A      [24]  953 	mov	dptr,#_ProcessIBlock_sWtx_1_54
   036D 75 F0 40      [24]  954 	mov	b,#0x40
   0370 12r00r00      [24]  955 	lcall	_ResetWtx
                            956 ;	iso.c:184: SendSwtx();
   0373 12r00r15      [24]  957 	lcall	_SendSwtx
   0376 D0 01         [24]  958 	pop	ar1
   0378 D0 02         [24]  959 	pop	ar2
                            960 ;	iso.c:185: while(!PacketAvailable(PICC));
   037A                     961 00103$:
   037A 75 82 01      [24]  962 	mov	dpl,#0x01
   037D C0 02         [24]  963 	push	ar2
   037F C0 01         [24]  964 	push	ar1
   0381 12r00r00      [24]  965 	lcall	_PacketAvailable
   0384 E5 82         [12]  966 	mov	a,dpl
   0386 D0 01         [24]  967 	pop	ar1
   0388 D0 02         [24]  968 	pop	ar2
   038A 60 EE         [24]  969 	jz	00103$
                            970 ;	iso.c:187: if(piccRx[0] != WTX_RESPONSE) {
   038C 85*07 82      [24]  971 	mov	dpl,_piccRx
   038F 85*08 83      [24]  972 	mov	dph,(_piccRx + 1)
   0392 E0            [24]  973 	movx	a,@dptr
   0393 FE            [12]  974 	mov	r6,a
   0394 BE F2 02      [24]  975 	cjne	r6,#0xF2,00161$
   0397 80 01         [24]  976 	sjmp	00107$
   0399                     977 00161$:
                            978 ;	iso.c:188: return;
   0399 22            [24]  979 	ret
   039A                     980 00107$:
                            981 ;	iso.c:190: SendDebug(D_WTX_ACK);
   039A 75 82 0F      [24]  982 	mov	dpl,#0x0F
   039D C0 02         [24]  983 	push	ar2
   039F C0 01         [24]  984 	push	ar1
   03A1 12r00r00      [24]  985 	lcall	_SendDebug
                            986 ;	iso.c:191: ResetRx(PICC);
   03A4 75 82 01      [24]  987 	mov	dpl,#0x01
   03A7 12r00r00      [24]  988 	lcall	_ResetRx
   03AA D0 01         [24]  989 	pop	ar1
   03AC D0 02         [24]  990 	pop	ar2
                            991 ;	iso.c:194: while(1) {
   03AE                     992 00122$:
                            993 ;	iso.c:202: if(PacketAvailable(HOST)) {  // host sent (last part of) response
   03AE 75 82 00      [24]  994 	mov	dpl,#0x00
   03B1 C0 02         [24]  995 	push	ar2
   03B3 C0 01         [24]  996 	push	ar1
   03B5 12r00r00      [24]  997 	lcall	_PacketAvailable
   03B8 E5 82         [12]  998 	mov	a,dpl
   03BA D0 01         [24]  999 	pop	ar1
   03BC D0 02         [24] 1000 	pop	ar2
   03BE 70 03         [24] 1001 	jnz	00162$
   03C0 02r04rB4      [24] 1002 	ljmp	00119$
   03C3                    1003 00162$:
                           1004 ;	iso.c:203: SendDebug(D_GEN_0);
   03C3 75 82 10      [24] 1005 	mov	dpl,#0x10
   03C6 C0 02         [24] 1006 	push	ar2
   03C8 C0 01         [24] 1007 	push	ar1
   03CA 12r00r00      [24] 1008 	lcall	_SendDebug
                           1009 ;	iso.c:204: TX_BUF[0] = 0x02 | blockNumber;                      // PCB
   03CD 12r00r00      [24] 1010 	lcall	_GetTxBuf
   03D0 74 02         [12] 1011 	mov	a,#0x02
   03D2 45*02         [12] 1012 	orl	a,_blockNumber
   03D4 F0            [24] 1013 	movx	@dptr,a
                           1014 ;	iso.c:205: memcpy(TX_BUF+apduOffset, hostRx, GetRxCount(HOST)); // APDU data
   03D5 12r00r00      [24] 1015 	lcall	_GetTxBuf
   03D8 E5 82         [12] 1016 	mov	a,dpl
   03DA 85 83 F0      [24] 1017 	mov	b,dph
   03DD D0 01         [24] 1018 	pop	ar1
   03DF D0 02         [24] 1019 	pop	ar2
   03E1 25*09         [12] 1020 	add	a,_ProcessIBlock_apduOffset_1_54
   03E3 FD            [12] 1021 	mov	r5,a
   03E4 E4            [12] 1022 	clr	a
   03E5 35 F0         [12] 1023 	addc	a,b
   03E7 FE            [12] 1024 	mov	r6,a
   03E8 8D*0F         [24] 1025 	mov	_ProcessIBlock_sloc0_1_0,r5
   03EA 8E*10         [24] 1026 	mov	(_ProcessIBlock_sloc0_1_0 + 1),r6
   03EC 75*11 00      [24] 1027 	mov	(_ProcessIBlock_sloc0_1_0 + 2),#0x00
   03EF A8*05         [24] 1028 	mov	r0,_hostRx
   03F1 AB*06         [24] 1029 	mov	r3,(_hostRx + 1)
   03F3 7E 00         [12] 1030 	mov	r6,#0x00
   03F5 75 82 00      [24] 1031 	mov	dpl,#0x00
   03F8 C0 06         [24] 1032 	push	ar6
   03FA C0 03         [24] 1033 	push	ar3
   03FC C0 02         [24] 1034 	push	ar2
   03FE C0 01         [24] 1035 	push	ar1
   0400 C0 00         [24] 1036 	push	ar0
   0402 12r00r00      [24] 1037 	lcall	_GetRxCount
   0405 85 82*00      [24] 1038 	mov	_memcpy_PARM_3,dpl
   0408 85 83*01      [24] 1039 	mov	(_memcpy_PARM_3 + 1),dph
   040B D0 00         [24] 1040 	pop	ar0
   040D D0 01         [24] 1041 	pop	ar1
   040F D0 02         [24] 1042 	pop	ar2
   0411 D0 03         [24] 1043 	pop	ar3
   0413 D0 06         [24] 1044 	pop	ar6
   0415 88*00         [24] 1045 	mov	_memcpy_PARM_2,r0
   0417 8B*01         [24] 1046 	mov	(_memcpy_PARM_2 + 1),r3
   0419 8E*02         [24] 1047 	mov	(_memcpy_PARM_2 + 2),r6
   041B 85*0F 82      [24] 1048 	mov	dpl,_ProcessIBlock_sloc0_1_0
   041E 85*10 83      [24] 1049 	mov	dph,(_ProcessIBlock_sloc0_1_0 + 1)
   0421 85*11 F0      [24] 1050 	mov	b,(_ProcessIBlock_sloc0_1_0 + 2)
   0424 C0 02         [24] 1051 	push	ar2
   0426 C0 01         [24] 1052 	push	ar1
   0428 12r00r00      [24] 1053 	lcall	_memcpy
                           1054 ;	iso.c:206: ComputeCrc(TX_BUF, GetRxCount(HOST)+apduOffset);  // CRC
   042B 12r00r00      [24] 1055 	lcall	_GetTxBuf
   042E AD 82         [24] 1056 	mov	r5,dpl
   0430 AE 83         [24] 1057 	mov	r6,dph
   0432 D0 01         [24] 1058 	pop	ar1
   0434 D0 02         [24] 1059 	pop	ar2
   0436 7C 00         [12] 1060 	mov	r4,#0x00
   0438 75 82 00      [24] 1061 	mov	dpl,#0x00
   043B C0 06         [24] 1062 	push	ar6
   043D C0 05         [24] 1063 	push	ar5
   043F C0 04         [24] 1064 	push	ar4
   0441 C0 02         [24] 1065 	push	ar2
   0443 C0 01         [24] 1066 	push	ar1
   0445 12r00r00      [24] 1067 	lcall	_GetRxCount
   0448 E5 82         [12] 1068 	mov	a,dpl
   044A 85 83 F0      [24] 1069 	mov	b,dph
   044D D0 01         [24] 1070 	pop	ar1
   044F D0 02         [24] 1071 	pop	ar2
   0451 D0 04         [24] 1072 	pop	ar4
   0453 D0 05         [24] 1073 	pop	ar5
   0455 D0 06         [24] 1074 	pop	ar6
   0457 29            [12] 1075 	add	a,r1
   0458 F5*00         [12] 1076 	mov	_ComputeCrc_PARM_2,a
   045A EA            [12] 1077 	mov	a,r2
   045B 35 F0         [12] 1078 	addc	a,b
   045D F5*01         [12] 1079 	mov	(_ComputeCrc_PARM_2 + 1),a
   045F 8D 82         [24] 1080 	mov	dpl,r5
   0461 8E 83         [24] 1081 	mov	dph,r6
   0463 8C F0         [24] 1082 	mov	b,r4
   0465 C0 02         [24] 1083 	push	ar2
   0467 C0 01         [24] 1084 	push	ar1
   0469 12r00r00      [24] 1085 	lcall	_ComputeCrc
                           1086 ;	iso.c:208: SendPacket(PICC, 0, TX_BUF, GetRxCount(HOST)+apduOffset+2);
   046C 12r00r00      [24] 1087 	lcall	_GetTxBuf
   046F AD 82         [24] 1088 	mov	r5,dpl
   0471 AE 83         [24] 1089 	mov	r6,dph
   0473 D0 01         [24] 1090 	pop	ar1
   0475 D0 02         [24] 1091 	pop	ar2
   0477 75 82 00      [24] 1092 	mov	dpl,#0x00
   047A C0 06         [24] 1093 	push	ar6
   047C C0 05         [24] 1094 	push	ar5
   047E C0 02         [24] 1095 	push	ar2
   0480 C0 01         [24] 1096 	push	ar1
   0482 12r00r00      [24] 1097 	lcall	_GetRxCount
   0485 E5 82         [12] 1098 	mov	a,dpl
   0487 85 83 F0      [24] 1099 	mov	b,dph
   048A D0 01         [24] 1100 	pop	ar1
   048C D0 02         [24] 1101 	pop	ar2
   048E D0 05         [24] 1102 	pop	ar5
   0490 D0 06         [24] 1103 	pop	ar6
   0492 29            [12] 1104 	add	a,r1
   0493 FB            [12] 1105 	mov	r3,a
   0494 EA            [12] 1106 	mov	a,r2
   0495 35 F0         [12] 1107 	addc	a,b
   0497 FC            [12] 1108 	mov	r4,a
   0498 74 02         [12] 1109 	mov	a,#0x02
   049A 2B            [12] 1110 	add	a,r3
   049B F5*00         [12] 1111 	mov	_SendPacket_PARM_4,a
   049D E4            [12] 1112 	clr	a
   049E 3C            [12] 1113 	addc	a,r4
   049F F5*01         [12] 1114 	mov	(_SendPacket_PARM_4 + 1),a
   04A1 75*00 00      [24] 1115 	mov	_SendPacket_PARM_2,#0x00
   04A4 8D*00         [24] 1116 	mov	_SendPacket_PARM_3,r5
   04A6 8E*01         [24] 1117 	mov	(_SendPacket_PARM_3 + 1),r6
   04A8 75 82 01      [24] 1118 	mov	dpl,#0x01
   04AB 12r00r00      [24] 1119 	lcall	_SendPacket
                           1120 ;	iso.c:209: ResetRx(HOST);
   04AE 75 82 00      [24] 1121 	mov	dpl,#0x00
                           1122 ;	iso.c:210: return;
   04B1 02r00r00      [24] 1123 	ljmp	_ResetRx
   04B4                    1124 00119$:
                           1125 ;	iso.c:211: } else if(GetRxCount(HOST) == (BUFSIZE-1))  { // host sent part of response
   04B4 75 82 00      [24] 1126 	mov	dpl,#0x00
   04B7 C0 02         [24] 1127 	push	ar2
   04B9 C0 01         [24] 1128 	push	ar1
   04BB 12r00r00      [24] 1129 	lcall	_GetRxCount
   04BE AD 82         [24] 1130 	mov	r5,dpl
   04C0 AE 83         [24] 1131 	mov	r6,dph
   04C2 D0 01         [24] 1132 	pop	ar1
   04C4 D0 02         [24] 1133 	pop	ar2
   04C6 BD FF 05      [24] 1134 	cjne	r5,#0xFF,00163$
   04C9 BE 00 02      [24] 1135 	cjne	r6,#0x00,00163$
   04CC 80 03         [24] 1136 	sjmp	00164$
   04CE                    1137 00163$:
   04CE 02r03rAE      [24] 1138 	ljmp	00122$
   04D1                    1139 00164$:
                           1140 ;	iso.c:212: TX_BUF[0] = 0x12 | blockNumber; // PCB w/ chaining bit
   04D1 C0 02         [24] 1141 	push	ar2
   04D3 C0 01         [24] 1142 	push	ar1
   04D5 12r00r00      [24] 1143 	lcall	_GetTxBuf
   04D8 74 12         [12] 1144 	mov	a,#0x12
   04DA 45*02         [12] 1145 	orl	a,_blockNumber
   04DC F0            [24] 1146 	movx	@dptr,a
                           1147 ;	iso.c:213: memcpy(TX_BUF+apduOffset, hostRx, GetRxCount(HOST)); // APDU data
   04DD 12r00r00      [24] 1148 	lcall	_GetTxBuf
   04E0 E5 82         [12] 1149 	mov	a,dpl
   04E2 85 83 F0      [24] 1150 	mov	b,dph
   04E5 D0 01         [24] 1151 	pop	ar1
   04E7 D0 02         [24] 1152 	pop	ar2
   04E9 25*09         [12] 1153 	add	a,_ProcessIBlock_apduOffset_1_54
   04EB FD            [12] 1154 	mov	r5,a
   04EC E4            [12] 1155 	clr	a
   04ED 35 F0         [12] 1156 	addc	a,b
   04EF FE            [12] 1157 	mov	r6,a
   04F0 7C 00         [12] 1158 	mov	r4,#0x00
   04F2 A8*05         [24] 1159 	mov	r0,_hostRx
   04F4 AB*06         [24] 1160 	mov	r3,(_hostRx + 1)
   04F6 7F 00         [12] 1161 	mov	r7,#0x00
   04F8 75 82 00      [24] 1162 	mov	dpl,#0x00
   04FB C0 07         [24] 1163 	push	ar7
   04FD C0 06         [24] 1164 	push	ar6
   04FF C0 05         [24] 1165 	push	ar5
   0501 C0 04         [24] 1166 	push	ar4
   0503 C0 03         [24] 1167 	push	ar3
   0505 C0 02         [24] 1168 	push	ar2
   0507 C0 01         [24] 1169 	push	ar1
   0509 C0 00         [24] 1170 	push	ar0
   050B 12r00r00      [24] 1171 	lcall	_GetRxCount
   050E 85 82*00      [24] 1172 	mov	_memcpy_PARM_3,dpl
   0511 85 83*01      [24] 1173 	mov	(_memcpy_PARM_3 + 1),dph
   0514 D0 00         [24] 1174 	pop	ar0
   0516 D0 01         [24] 1175 	pop	ar1
   0518 D0 02         [24] 1176 	pop	ar2
   051A D0 03         [24] 1177 	pop	ar3
   051C D0 04         [24] 1178 	pop	ar4
   051E D0 05         [24] 1179 	pop	ar5
   0520 D0 06         [24] 1180 	pop	ar6
   0522 D0 07         [24] 1181 	pop	ar7
   0524 88*00         [24] 1182 	mov	_memcpy_PARM_2,r0
   0526 8B*01         [24] 1183 	mov	(_memcpy_PARM_2 + 1),r3
   0528 8F*02         [24] 1184 	mov	(_memcpy_PARM_2 + 2),r7
   052A 8D 82         [24] 1185 	mov	dpl,r5
   052C 8E 83         [24] 1186 	mov	dph,r6
   052E 8C F0         [24] 1187 	mov	b,r4
   0530 C0 02         [24] 1188 	push	ar2
   0532 C0 01         [24] 1189 	push	ar1
   0534 12r00r00      [24] 1190 	lcall	_memcpy
                           1191 ;	iso.c:214: ComputeCrc(TX_BUF, GetRxCount(HOST)+apduOffset);  // CRC
   0537 12r00r00      [24] 1192 	lcall	_GetTxBuf
   053A AE 82         [24] 1193 	mov	r6,dpl
   053C AF 83         [24] 1194 	mov	r7,dph
   053E D0 01         [24] 1195 	pop	ar1
   0540 D0 02         [24] 1196 	pop	ar2
   0542 7D 00         [12] 1197 	mov	r5,#0x00
   0544 75 82 00      [24] 1198 	mov	dpl,#0x00
   0547 C0 07         [24] 1199 	push	ar7
   0549 C0 06         [24] 1200 	push	ar6
   054B C0 05         [24] 1201 	push	ar5
   054D C0 02         [24] 1202 	push	ar2
   054F C0 01         [24] 1203 	push	ar1
   0551 12r00r00      [24] 1204 	lcall	_GetRxCount
   0554 E5 82         [12] 1205 	mov	a,dpl
   0556 85 83 F0      [24] 1206 	mov	b,dph
   0559 D0 01         [24] 1207 	pop	ar1
   055B D0 02         [24] 1208 	pop	ar2
   055D D0 05         [24] 1209 	pop	ar5
   055F D0 06         [24] 1210 	pop	ar6
   0561 D0 07         [24] 1211 	pop	ar7
   0563 29            [12] 1212 	add	a,r1
   0564 F5*00         [12] 1213 	mov	_ComputeCrc_PARM_2,a
   0566 EA            [12] 1214 	mov	a,r2
   0567 35 F0         [12] 1215 	addc	a,b
   0569 F5*01         [12] 1216 	mov	(_ComputeCrc_PARM_2 + 1),a
   056B 8E 82         [24] 1217 	mov	dpl,r6
   056D 8F 83         [24] 1218 	mov	dph,r7
   056F 8D F0         [24] 1219 	mov	b,r5
   0571 C0 02         [24] 1220 	push	ar2
   0573 C0 01         [24] 1221 	push	ar1
   0575 12r00r00      [24] 1222 	lcall	_ComputeCrc
                           1223 ;	iso.c:215: SendPacket(PICC, 0, TX_BUF, GetRxCount(HOST)+apduOffset+2);
   0578 12r00r00      [24] 1224 	lcall	_GetTxBuf
   057B AE 82         [24] 1225 	mov	r6,dpl
   057D AF 83         [24] 1226 	mov	r7,dph
   057F D0 01         [24] 1227 	pop	ar1
   0581 D0 02         [24] 1228 	pop	ar2
   0583 75 82 00      [24] 1229 	mov	dpl,#0x00
   0586 C0 07         [24] 1230 	push	ar7
   0588 C0 06         [24] 1231 	push	ar6
   058A C0 02         [24] 1232 	push	ar2
   058C C0 01         [24] 1233 	push	ar1
   058E 12r00r00      [24] 1234 	lcall	_GetRxCount
   0591 E5 82         [12] 1235 	mov	a,dpl
   0593 85 83 F0      [24] 1236 	mov	b,dph
   0596 D0 01         [24] 1237 	pop	ar1
   0598 D0 02         [24] 1238 	pop	ar2
   059A D0 06         [24] 1239 	pop	ar6
   059C D0 07         [24] 1240 	pop	ar7
   059E 29            [12] 1241 	add	a,r1
   059F FC            [12] 1242 	mov	r4,a
   05A0 EA            [12] 1243 	mov	a,r2
   05A1 35 F0         [12] 1244 	addc	a,b
   05A3 FD            [12] 1245 	mov	r5,a
   05A4 74 02         [12] 1246 	mov	a,#0x02
   05A6 2C            [12] 1247 	add	a,r4
   05A7 F5*00         [12] 1248 	mov	_SendPacket_PARM_4,a
   05A9 E4            [12] 1249 	clr	a
   05AA 3D            [12] 1250 	addc	a,r5
   05AB F5*01         [12] 1251 	mov	(_SendPacket_PARM_4 + 1),a
   05AD 75*00 00      [24] 1252 	mov	_SendPacket_PARM_2,#0x00
   05B0 8E*00         [24] 1253 	mov	_SendPacket_PARM_3,r6
   05B2 8F*01         [24] 1254 	mov	(_SendPacket_PARM_3 + 1),r7
   05B4 75 82 01      [24] 1255 	mov	dpl,#0x01
   05B7 C0 02         [24] 1256 	push	ar2
   05B9 C0 01         [24] 1257 	push	ar1
   05BB 12r00r00      [24] 1258 	lcall	_SendPacket
                           1259 ;	iso.c:216: ResetRx(HOST);            
   05BE 75 82 00      [24] 1260 	mov	dpl,#0x00
   05C1 12r00r00      [24] 1261 	lcall	_ResetRx
   05C4 D0 01         [24] 1262 	pop	ar1
   05C6 D0 02         [24] 1263 	pop	ar2
                           1264 ;	iso.c:219: while(!PacketAvailable(PICC));
   05C8                    1265 00108$:
   05C8 75 82 01      [24] 1266 	mov	dpl,#0x01
   05CB C0 02         [24] 1267 	push	ar2
   05CD C0 01         [24] 1268 	push	ar1
   05CF 12r00r00      [24] 1269 	lcall	_PacketAvailable
   05D2 E5 82         [12] 1270 	mov	a,dpl
   05D4 D0 01         [24] 1271 	pop	ar1
   05D6 D0 02         [24] 1272 	pop	ar2
   05D8 60 EE         [24] 1273 	jz	00108$
                           1274 ;	iso.c:220: if(IS_NAK(piccRx[0])) { 
   05DA 85*07 82      [24] 1275 	mov	dpl,_piccRx
   05DD 85*08 83      [24] 1276 	mov	dph,(_piccRx + 1)
   05E0 E0            [24] 1277 	movx	a,@dptr
   05E1 FF            [12] 1278 	mov	r7,a
   05E2 53 07 F0      [24] 1279 	anl	ar7,#0xF0
   05E5 BF B0 06      [24] 1280 	cjne	r7,#0xB0,00114$
                           1281 ;	iso.c:221: SendDebug(D_NAK_RECEIVED);
   05E8 75 82 0D      [24] 1282 	mov	dpl,#0x0D
                           1283 ;	iso.c:222: return;
   05EB 02r00r00      [24] 1284 	ljmp	_SendDebug
   05EE                    1285 00114$:
                           1286 ;	iso.c:223: } else if(IS_ACK(piccRx[0])) {
   05EE 85*07 82      [24] 1287 	mov	dpl,_piccRx
   05F1 85*08 83      [24] 1288 	mov	dph,(_piccRx + 1)
   05F4 E0            [24] 1289 	movx	a,@dptr
   05F5 FF            [12] 1290 	mov	r7,a
   05F6 53 07 F0      [24] 1291 	anl	ar7,#0xF0
   05F9 BF A0 0E      [24] 1292 	cjne	r7,#0xA0,00115$
                           1293 ;	iso.c:224: SendDebug(D_ACK_RECEIVED);
   05FC 75 82 0C      [24] 1294 	mov	dpl,#0x0C
   05FF C0 02         [24] 1295 	push	ar2
   0601 C0 01         [24] 1296 	push	ar1
   0603 12r00r00      [24] 1297 	lcall	_SendDebug
   0606 D0 01         [24] 1298 	pop	ar1
   0608 D0 02         [24] 1299 	pop	ar2
   060A                    1300 00115$:
                           1301 ;	iso.c:226: ResetRx(PICC); 
   060A 75 82 01      [24] 1302 	mov	dpl,#0x01
   060D C0 02         [24] 1303 	push	ar2
   060F C0 01         [24] 1304 	push	ar1
   0611 12r00r00      [24] 1305 	lcall	_ResetRx
   0614 D0 01         [24] 1306 	pop	ar1
   0616 D0 02         [24] 1307 	pop	ar2
                           1308 ;	iso.c:227: blockNumber ^= 1;
   0618 63*02 01      [24] 1309 	xrl	_blockNumber,#0x01
   061B 02r03rAE      [24] 1310 	ljmp	00122$
                           1311 ;------------------------------------------------------------
                           1312 ;Allocation info for local variables in function 'ProcessRBlock'
                           1313 ;------------------------------------------------------------
                           1314 ;	iso.c:240: static void ProcessRBlock() {
                           1315 ;	-----------------------------------------
                           1316 ;	 function ProcessRBlock
                           1317 ;	-----------------------------------------
   061E                    1318 _ProcessRBlock:
                           1319 ;	iso.c:241: if(piccRx[0] & R_NAK) {
   061E 85*07 82      [24] 1320 	mov	dpl,_piccRx
   0621 85*08 83      [24] 1321 	mov	dph,(_piccRx + 1)
   0624 E0            [24] 1322 	movx	a,@dptr
   0625 FF            [12] 1323 	mov	r7,a
   0626 30 E4 52      [24] 1324 	jnb	acc.4,00106$
                           1325 ;	iso.c:242: SendDebug(D_NAK_RECEIVED);
   0629 75 82 0D      [24] 1326 	mov	dpl,#0x0D
   062C 12r00r00      [24] 1327 	lcall	_SendDebug
                           1328 ;	iso.c:244: if((piccRx[0] & 1) == blockNumber) {
   062F 85*07 82      [24] 1329 	mov	dpl,_piccRx
   0632 85*08 83      [24] 1330 	mov	dph,(_piccRx + 1)
   0635 E0            [24] 1331 	movx	a,@dptr
   0636 54 01         [12] 1332 	anl	a,#0x01
   0638 FF            [12] 1333 	mov	r7,a
   0639 B5*02 07      [24] 1334 	cjne	a,_blockNumber,00104$
                           1335 ;	iso.c:245: if(iBlockReceived == 0) blockNumber ^= 1;
   063C E5*04         [12] 1336 	mov	a,_iBlockReceived
   063E 70 03         [24] 1337 	jnz	00104$
   0640 63*02 01      [24] 1338 	xrl	_blockNumber,#0x01
   0643                    1339 00104$:
                           1340 ;	iso.c:252: TX_BUF[0] = 0xA3;
   0643 12r00r00      [24] 1341 	lcall	_GetTxBuf
   0646 74 A3         [12] 1342 	mov	a,#0xA3
   0648 F0            [24] 1343 	movx	@dptr,a
                           1344 ;	iso.c:253: ComputeCrc(TX_BUF, 1);
   0649 12r00r00      [24] 1345 	lcall	_GetTxBuf
   064C AE 82         [24] 1346 	mov	r6,dpl
   064E AF 83         [24] 1347 	mov	r7,dph
   0650 7D 00         [12] 1348 	mov	r5,#0x00
   0652 75*00 01      [24] 1349 	mov	_ComputeCrc_PARM_2,#0x01
   0655 75*01 00      [24] 1350 	mov	(_ComputeCrc_PARM_2 + 1),#0x00
   0658 8E 82         [24] 1351 	mov	dpl,r6
   065A 8F 83         [24] 1352 	mov	dph,r7
   065C 8D F0         [24] 1353 	mov	b,r5
   065E 12r00r00      [24] 1354 	lcall	_ComputeCrc
                           1355 ;	iso.c:254: SendPacket(PICC, 0, TX_BUF, 3);
   0661 12r00r00      [24] 1356 	lcall	_GetTxBuf
   0664 85 82*00      [24] 1357 	mov	_SendPacket_PARM_3,dpl
   0667 85 83*01      [24] 1358 	mov	(_SendPacket_PARM_3 + 1),dph
   066A 75*00 00      [24] 1359 	mov	_SendPacket_PARM_2,#0x00
   066D 75*00 03      [24] 1360 	mov	_SendPacket_PARM_4,#0x03
   0670 75*01 00      [24] 1361 	mov	(_SendPacket_PARM_4 + 1),#0x00
   0673 75 82 01      [24] 1362 	mov	dpl,#0x01
   0676 12r00r00      [24] 1363 	lcall	_SendPacket
   0679 80 06         [24] 1364 	sjmp	00107$
   067B                    1365 00106$:
                           1366 ;	iso.c:256: SendDebug(D_ACK_RECEIVED);
   067B 75 82 0C      [24] 1367 	mov	dpl,#0x0C
   067E 12r00r00      [24] 1368 	lcall	_SendDebug
   0681                    1369 00107$:
                           1370 ;	iso.c:258: ResetRx(PICC);
   0681 75 82 01      [24] 1371 	mov	dpl,#0x01
   0684 02r00r00      [24] 1372 	ljmp	_ResetRx
                           1373 ;------------------------------------------------------------
                           1374 ;Allocation info for local variables in function 'ProcessSBlock'
                           1375 ;------------------------------------------------------------
                           1376 ;	iso.c:261: static void ProcessSBlock() { 
                           1377 ;	-----------------------------------------
                           1378 ;	 function ProcessSBlock
                           1379 ;	-----------------------------------------
   0687                    1380 _ProcessSBlock:
                           1381 ;	iso.c:263: switch(piccRx[0]) {
   0687 85*07 82      [24] 1382 	mov	dpl,_piccRx
   068A 85*08 83      [24] 1383 	mov	dph,(_piccRx + 1)
   068D E0            [24] 1384 	movx	a,@dptr
   068E FF            [12] 1385 	mov	r7,a
   068F BF C2 02      [24] 1386 	cjne	r7,#0xC2,00114$
   0692 80 0F         [24] 1387 	sjmp	00102$
   0694                    1388 00114$:
   0694 BF CA 18      [24] 1389 	cjne	r7,#0xCA,00105$
                           1390 ;	iso.c:265: if(piccRx[1] == cid) {
   0697 85*07 82      [24] 1391 	mov	dpl,_piccRx
   069A 85*08 83      [24] 1392 	mov	dph,(_piccRx + 1)
   069D A3            [24] 1393 	inc	dptr
   069E E0            [24] 1394 	movx	a,@dptr
   069F FF            [12] 1395 	mov	r7,a
   06A0 B5*01 0C      [24] 1396 	cjne	a,_cid,00105$
                           1397 ;	iso.c:266: case CMD_DESELECT:
   06A3                    1398 00102$:
                           1399 ;	iso.c:267: SendDebug(D_ISO_DESELECT);        
   06A3 75 82 0E      [24] 1400 	mov	dpl,#0x0E
   06A6 12r00r00      [24] 1401 	lcall	_SendDebug
                           1402 ;	iso.c:268: SendDeselectResp();            
   06A9 12r06rB5      [24] 1403 	lcall	_SendDeselectResp
                           1404 ;	iso.c:269: iBlockReceived = 0;
   06AC 75*04 00      [24] 1405 	mov	_iBlockReceived,#0x00
                           1406 ;	iso.c:272: }
   06AF                    1407 00105$:
                           1408 ;	iso.c:273: ResetRx(PICC);
   06AF 75 82 01      [24] 1409 	mov	dpl,#0x01
   06B2 02r00r00      [24] 1410 	ljmp	_ResetRx
                           1411 ;------------------------------------------------------------
                           1412 ;Allocation info for local variables in function 'SendDeselectResp'
                           1413 ;------------------------------------------------------------
                           1414 ;	iso.c:276: static void SendDeselectResp(void) {
                           1415 ;	-----------------------------------------
                           1416 ;	 function SendDeselectResp
                           1417 ;	-----------------------------------------
   06B5                    1418 _SendDeselectResp:
                           1419 ;	iso.c:277: memcpy(TX_BUF,piccRx,3);
   06B5 12r00r00      [24] 1420 	lcall	_GetTxBuf
   06B8 AE 82         [24] 1421 	mov	r6,dpl
   06BA AF 83         [24] 1422 	mov	r7,dph
   06BC 7D 00         [12] 1423 	mov	r5,#0x00
   06BE 85*07*00      [24] 1424 	mov	_memcpy_PARM_2,_piccRx
   06C1 85*08*01      [24] 1425 	mov	(_memcpy_PARM_2 + 1),(_piccRx + 1)
   06C4 75*02 00      [24] 1426 	mov	(_memcpy_PARM_2 + 2),#0x00
   06C7 75*00 03      [24] 1427 	mov	_memcpy_PARM_3,#0x03
   06CA 75*01 00      [24] 1428 	mov	(_memcpy_PARM_3 + 1),#0x00
   06CD 8E 82         [24] 1429 	mov	dpl,r6
   06CF 8F 83         [24] 1430 	mov	dph,r7
   06D1 8D F0         [24] 1431 	mov	b,r5
   06D3 12r00r00      [24] 1432 	lcall	_memcpy
                           1433 ;	iso.c:278: SendPacket(PICC, 0, piccRx, 3);
   06D6 75*00 00      [24] 1434 	mov	_SendPacket_PARM_2,#0x00
   06D9 85*07*00      [24] 1435 	mov	_SendPacket_PARM_3,_piccRx
   06DC 85*08*01      [24] 1436 	mov	(_SendPacket_PARM_3 + 1),(_piccRx + 1)
   06DF 75*00 03      [24] 1437 	mov	_SendPacket_PARM_4,#0x03
   06E2 75*01 00      [24] 1438 	mov	(_SendPacket_PARM_4 + 1),#0x00
   06E5 75 82 01      [24] 1439 	mov	dpl,#0x01
   06E8 02r00r00      [24] 1440 	ljmp	_SendPacket
                           1441 	.area CSEG    (CODE)
                           1442 	.area CONST   (CODE)
   0000                    1443 _fsdTable:
   0000 10 00              1444 	.byte #0x10,#0x00	; 16
   0002 18 00              1445 	.byte #0x18,#0x00	; 24
   0004 20 00              1446 	.byte #0x20,#0x00	; 32
   0006 28 00              1447 	.byte #0x28,#0x00	; 40
   0008 30 00              1448 	.byte #0x30,#0x00	; 48
   000A 40 00              1449 	.byte #0x40,#0x00	; 64
   000C 60 00              1450 	.byte #0x60,#0x00	; 96
   000E 80 00              1451 	.byte #0x80,#0x00	; 128
   0010 00 01              1452 	.byte #0x00,#0x01	; 256
   0012                    1453 _ats:
   0012 77                 1454 	.db #0x77	; 119	'w'
   0013 80                 1455 	.db #0x80	; 128
   0014 70                 1456 	.db #0x70	; 112	'p'
   0015 00                 1457 	.db #0x00	; 0
   0016                    1458 _historical:
   0016 45                 1459 	.db #0x45	; 69	'E'
   0017 50                 1460 	.db #0x50	; 80	'P'
   0018 41                 1461 	.db #0x41	; 65	'A'
   0019 00                 1462 	.db #0x00	; 0
   001A 00                 1463 	.db #0x00	; 0
   001B 00                 1464 	.db #0x00	; 0
   001C 00                 1465 	.db #0x00	; 0
   001D 61                 1466 	.db #0x61	; 97	'a'
   001E 27                 1467 	.db #0x27	; 39
   001F 38                 1468 	.db #0x38	; 56	'8'
   0020 94                 1469 	.db #0x94	; 148
   0021 00                 1470 	.db #0x00	; 0
   0022 00                 1471 	.db #0x00	; 0
   0023 00                 1472 	.db #0x00	; 0
   0024 00                 1473 	.db #0x00	; 0
                           1474 	.area XINIT   (CODE)
                           1475 	.area CABS    (ABS,CODE)
