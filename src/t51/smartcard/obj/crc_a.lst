                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.3.0 #8604 (Sep  2 2013) (Linux)
                              4 ; This file was generated Thu May  8 18:45:16 2014
                              5 ;--------------------------------------------------------
                              6 	.module crc_a
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _UpdateCrc_PARM_2
                             13 	.globl _ComputeCrc_PARM_2
                             14 	.globl _UpdateCrc
                             15 	.globl _ComputeCrc
                             16 ;--------------------------------------------------------
                             17 ; special function registers
                             18 ;--------------------------------------------------------
                             19 	.area RSEG    (ABS,DATA)
   0000                      20 	.org 0x0000
                             21 ;--------------------------------------------------------
                             22 ; special function bits
                             23 ;--------------------------------------------------------
                             24 	.area RSEG    (ABS,DATA)
   0000                      25 	.org 0x0000
                             26 ;--------------------------------------------------------
                             27 ; overlayable register banks
                             28 ;--------------------------------------------------------
                             29 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                      30 	.ds 8
                             31 ;--------------------------------------------------------
                             32 ; internal ram data
                             33 ;--------------------------------------------------------
                             34 	.area DSEG    (DATA)
   0000                      35 _ComputeCrc_PARM_2:
   0000                      36 	.ds 2
   0002                      37 _ComputeCrc_chBlock_1_6:
   0002                      38 	.ds 1
   0003                      39 _ComputeCrc_wCrc_1_6:
   0003                      40 	.ds 2
                             41 ;--------------------------------------------------------
                             42 ; overlayable items in internal ram 
                             43 ;--------------------------------------------------------
                             44 	.area	OSEG    (OVR,DATA)
   0000                      45 _UpdateCrc_PARM_2:
   0000                      46 	.ds 3
   0003                      47 _UpdateCrc_sloc0_1_0:
   0003                      48 	.ds 2
                             49 ;--------------------------------------------------------
                             50 ; indirectly addressable internal ram data
                             51 ;--------------------------------------------------------
                             52 	.area ISEG    (DATA)
                             53 ;--------------------------------------------------------
                             54 ; absolute internal ram data
                             55 ;--------------------------------------------------------
                             56 	.area IABS    (ABS,DATA)
                             57 	.area IABS    (ABS,DATA)
                             58 ;--------------------------------------------------------
                             59 ; bit data
                             60 ;--------------------------------------------------------
                             61 	.area BSEG    (BIT)
                             62 ;--------------------------------------------------------
                             63 ; paged external ram data
                             64 ;--------------------------------------------------------
                             65 	.area PSEG    (PAG,XDATA)
                             66 ;--------------------------------------------------------
                             67 ; external ram data
                             68 ;--------------------------------------------------------
                             69 	.area XSEG    (XDATA)
                             70 ;--------------------------------------------------------
                             71 ; absolute external ram data
                             72 ;--------------------------------------------------------
                             73 	.area XABS    (ABS,XDATA)
                             74 ;--------------------------------------------------------
                             75 ; external initialized ram data
                             76 ;--------------------------------------------------------
                             77 	.area XISEG   (XDATA)
                             78 	.area HOME    (CODE)
                             79 	.area GSINIT0 (CODE)
                             80 	.area GSINIT1 (CODE)
                             81 	.area GSINIT2 (CODE)
                             82 	.area GSINIT3 (CODE)
                             83 	.area GSINIT4 (CODE)
                             84 	.area GSINIT5 (CODE)
                             85 	.area GSINIT  (CODE)
                             86 	.area GSFINAL (CODE)
                             87 	.area CSEG    (CODE)
                             88 ;--------------------------------------------------------
                             89 ; global & static initialisations
                             90 ;--------------------------------------------------------
                             91 	.area HOME    (CODE)
                             92 	.area GSINIT  (CODE)
                             93 	.area GSFINAL (CODE)
                             94 	.area GSINIT  (CODE)
                             95 ;--------------------------------------------------------
                             96 ; Home
                             97 ;--------------------------------------------------------
                             98 	.area HOME    (CODE)
                             99 	.area HOME    (CODE)
                            100 ;--------------------------------------------------------
                            101 ; code
                            102 ;--------------------------------------------------------
                            103 	.area CSEG    (CODE)
                            104 ;------------------------------------------------------------
                            105 ;Allocation info for local variables in function 'UpdateCrc'
                            106 ;------------------------------------------------------------
                            107 ;lpwCrc                    Allocated with name '_UpdateCrc_PARM_2'
                            108 ;ch                        Allocated to registers r7 
                            109 ;sloc0                     Allocated with name '_UpdateCrc_sloc0_1_0'
                            110 ;------------------------------------------------------------
                            111 ;	crc_a.c:12: uint16_t UpdateCrc(unsigned char ch, uint16_t *lpwCrc)
                            112 ;	-----------------------------------------
                            113 ;	 function UpdateCrc
                            114 ;	-----------------------------------------
   0000                     115 _UpdateCrc:
                     0007   116 	ar7 = 0x07
                     0006   117 	ar6 = 0x06
                     0005   118 	ar5 = 0x05
                     0004   119 	ar4 = 0x04
                     0003   120 	ar3 = 0x03
                     0002   121 	ar2 = 0x02
                     0001   122 	ar1 = 0x01
                     0000   123 	ar0 = 0x00
   0000 AF 82         [24]  124 	mov	r7,dpl
                            125 ;	crc_a.c:14: ch = (ch^(unsigned char)((*lpwCrc) & 0x00FF));
   0002 AC*00         [24]  126 	mov	r4,_UpdateCrc_PARM_2
   0004 AD*01         [24]  127 	mov	r5,(_UpdateCrc_PARM_2 + 1)
   0006 AE*02         [24]  128 	mov	r6,(_UpdateCrc_PARM_2 + 2)
   0008 8C 82         [24]  129 	mov	dpl,r4
   000A 8D 83         [24]  130 	mov	dph,r5
   000C 8E F0         [24]  131 	mov	b,r6
   000E 12r00r00      [24]  132 	lcall	__gptrget
   0011 FA            [12]  133 	mov	r2,a
   0012 A3            [24]  134 	inc	dptr
   0013 12r00r00      [24]  135 	lcall	__gptrget
   0016 FB            [12]  136 	mov	r3,a
   0017 8A 00         [24]  137 	mov	ar0,r2
   0019 E8            [12]  138 	mov	a,r0
   001A 62 07         [12]  139 	xrl	ar7,a
                            140 ;	crc_a.c:15: ch = (ch^(ch<<4));
   001C EF            [12]  141 	mov	a,r7
   001D C4            [12]  142 	swap	a
   001E 54 F0         [12]  143 	anl	a,#0xF0
   0020 62 07         [12]  144 	xrl	ar7,a
                            145 ;	crc_a.c:16: *lpwCrc = (*lpwCrc >> 8)^((uint16_t)ch << 8)^((uint16_t)ch<<3)^((uint16_t)ch>>4);
   0022 8B*03         [24]  146 	mov	_UpdateCrc_sloc0_1_0,r3
   0024 75*04 00      [24]  147 	mov	(_UpdateCrc_sloc0_1_0 + 1),#0x00
   0027 8F 01         [24]  148 	mov	ar1,r7
   0029 7F 00         [12]  149 	mov	r7,#0x00
   002B 89 03         [24]  150 	mov	ar3,r1
   002D E4            [12]  151 	clr	a
   002E 62*03         [12]  152 	xrl	_UpdateCrc_sloc0_1_0,a
   0030 EB            [12]  153 	mov	a,r3
   0031 62*04         [12]  154 	xrl	(_UpdateCrc_sloc0_1_0 + 1),a
   0033 89 02         [24]  155 	mov	ar2,r1
   0035 EF            [12]  156 	mov	a,r7
   0036 C4            [12]  157 	swap	a
   0037 03            [12]  158 	rr	a
   0038 54 F8         [12]  159 	anl	a,#0xF8
   003A CA            [12]  160 	xch	a,r2
   003B C4            [12]  161 	swap	a
   003C 03            [12]  162 	rr	a
   003D CA            [12]  163 	xch	a,r2
   003E 6A            [12]  164 	xrl	a,r2
   003F CA            [12]  165 	xch	a,r2
   0040 54 F8         [12]  166 	anl	a,#0xF8
   0042 CA            [12]  167 	xch	a,r2
   0043 6A            [12]  168 	xrl	a,r2
   0044 FB            [12]  169 	mov	r3,a
   0045 E5*03         [12]  170 	mov	a,_UpdateCrc_sloc0_1_0
   0047 62 02         [12]  171 	xrl	ar2,a
   0049 E5*04         [12]  172 	mov	a,(_UpdateCrc_sloc0_1_0 + 1)
   004B 62 03         [12]  173 	xrl	ar3,a
   004D EF            [12]  174 	mov	a,r7
   004E C4            [12]  175 	swap	a
   004F C9            [12]  176 	xch	a,r1
   0050 C4            [12]  177 	swap	a
   0051 54 0F         [12]  178 	anl	a,#0x0F
   0053 69            [12]  179 	xrl	a,r1
   0054 C9            [12]  180 	xch	a,r1
   0055 54 0F         [12]  181 	anl	a,#0x0F
   0057 C9            [12]  182 	xch	a,r1
   0058 69            [12]  183 	xrl	a,r1
   0059 C9            [12]  184 	xch	a,r1
   005A FF            [12]  185 	mov	r7,a
   005B E9            [12]  186 	mov	a,r1
   005C 62 02         [12]  187 	xrl	ar2,a
   005E EF            [12]  188 	mov	a,r7
   005F 62 03         [12]  189 	xrl	ar3,a
   0061 8C 82         [24]  190 	mov	dpl,r4
   0063 8D 83         [24]  191 	mov	dph,r5
   0065 8E F0         [24]  192 	mov	b,r6
   0067 EA            [12]  193 	mov	a,r2
   0068 12r00r00      [24]  194 	lcall	__gptrput
   006B A3            [24]  195 	inc	dptr
   006C EB            [12]  196 	mov	a,r3
   006D 12r00r00      [24]  197 	lcall	__gptrput
                            198 ;	crc_a.c:17: return(*lpwCrc);
   0070 8A 82         [24]  199 	mov	dpl,r2
   0072 8B 83         [24]  200 	mov	dph,r3
   0074 22            [24]  201 	ret
                            202 ;------------------------------------------------------------
                            203 ;Allocation info for local variables in function 'ComputeCrc'
                            204 ;------------------------------------------------------------
                            205 ;Length                    Allocated with name '_ComputeCrc_PARM_2'
                            206 ;Data                      Allocated to registers r5 r6 r7 
                            207 ;chBlock                   Allocated with name '_ComputeCrc_chBlock_1_6'
                            208 ;wCrc                      Allocated with name '_ComputeCrc_wCrc_1_6'
                            209 ;------------------------------------------------------------
                            210 ;	crc_a.c:20: void ComputeCrc(char *Data, int Length) {
                            211 ;	-----------------------------------------
                            212 ;	 function ComputeCrc
                            213 ;	-----------------------------------------
   0075                     214 _ComputeCrc:
   0075 AD 82         [24]  215 	mov	r5,dpl
   0077 AE 83         [24]  216 	mov	r6,dph
   0079 AF F0         [24]  217 	mov	r7,b
                            218 ;	crc_a.c:23: wCrc = 0x6363; /* ITU-V.41 */
   007B 75*03 63      [24]  219 	mov	_ComputeCrc_wCrc_1_6,#0x63
   007E 75*04 63      [24]  220 	mov	(_ComputeCrc_wCrc_1_6 + 1),#0x63
                            221 ;	crc_a.c:24: do {
   0081 8D 02         [24]  222 	mov	ar2,r5
   0083 8E 03         [24]  223 	mov	ar3,r6
   0085 8F 04         [24]  224 	mov	ar4,r7
   0087 A8*00         [24]  225 	mov	r0,_ComputeCrc_PARM_2
   0089 A9*01         [24]  226 	mov	r1,(_ComputeCrc_PARM_2 + 1)
   008B                     227 00101$:
                            228 ;	crc_a.c:25: chBlock = *Data++;
   008B 8A 82         [24]  229 	mov	dpl,r2
   008D 8B 83         [24]  230 	mov	dph,r3
   008F 8C F0         [24]  231 	mov	b,r4
   0091 12r00r00      [24]  232 	lcall	__gptrget
   0094 F5*02         [12]  233 	mov	_ComputeCrc_chBlock_1_6,a
   0096 A3            [24]  234 	inc	dptr
   0097 AA 82         [24]  235 	mov	r2,dpl
   0099 AB 83         [24]  236 	mov	r3,dph
                            237 ;	crc_a.c:26: UpdateCrc(chBlock, &wCrc);
   009B 75*00r03      [24]  238 	mov	_UpdateCrc_PARM_2,#_ComputeCrc_wCrc_1_6
   009E 75*01 00      [24]  239 	mov	(_UpdateCrc_PARM_2 + 1),#0x00
   00A1 75*02 40      [24]  240 	mov	(_UpdateCrc_PARM_2 + 2),#0x40
   00A4 85*02 82      [24]  241 	mov	dpl,_ComputeCrc_chBlock_1_6
   00A7 C0 04         [24]  242 	push	ar4
   00A9 C0 03         [24]  243 	push	ar3
   00AB C0 02         [24]  244 	push	ar2
   00AD C0 01         [24]  245 	push	ar1
   00AF C0 00         [24]  246 	push	ar0
   00B1 12r00r00      [24]  247 	lcall	_UpdateCrc
   00B4 D0 00         [24]  248 	pop	ar0
   00B6 D0 01         [24]  249 	pop	ar1
   00B8 D0 02         [24]  250 	pop	ar2
   00BA D0 03         [24]  251 	pop	ar3
   00BC D0 04         [24]  252 	pop	ar4
                            253 ;	crc_a.c:27: } while (--Length);
   00BE 18            [12]  254 	dec	r0
   00BF B8 FF 01      [24]  255 	cjne	r0,#0xFF,00113$
   00C2 19            [12]  256 	dec	r1
   00C3                     257 00113$:
   00C3 E8            [12]  258 	mov	a,r0
   00C4 49            [12]  259 	orl	a,r1
                            260 ;	crc_a.c:29: *Data++ = (BYTE) (wCrc & 0xFF);
   00C5 70 C4         [24]  261 	jnz	00101$
   00C7 A8*03         [24]  262 	mov	r0,_ComputeCrc_wCrc_1_6
   00C9 8A 82         [24]  263 	mov	dpl,r2
   00CB 8B 83         [24]  264 	mov	dph,r3
   00CD 8C F0         [24]  265 	mov	b,r4
   00CF E8            [12]  266 	mov	a,r0
   00D0 12r00r00      [24]  267 	lcall	__gptrput
   00D3 74 01         [12]  268 	mov	a,#0x01
   00D5 2A            [12]  269 	add	a,r2
   00D6 FD            [12]  270 	mov	r5,a
   00D7 E4            [12]  271 	clr	a
   00D8 3B            [12]  272 	addc	a,r3
   00D9 FE            [12]  273 	mov	r6,a
   00DA 8C 07         [24]  274 	mov	ar7,r4
                            275 ;	crc_a.c:30: *Data++ = (BYTE) ((wCrc >> 8) & 0xFF);
   00DC AC*04         [24]  276 	mov	r4,(_ComputeCrc_wCrc_1_6 + 1)
   00DE 8D 82         [24]  277 	mov	dpl,r5
   00E0 8E 83         [24]  278 	mov	dph,r6
   00E2 8F F0         [24]  279 	mov	b,r7
   00E4 EC            [12]  280 	mov	a,r4
                            281 ;	crc_a.c:31: return;
   00E5 02r00r00      [24]  282 	ljmp	__gptrput
                            283 	.area CSEG    (CODE)
                            284 	.area CONST   (CODE)
                            285 	.area XINIT   (CODE)
                            286 	.area CABS    (ABS,CODE)
